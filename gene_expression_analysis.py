# -*- coding: utf-8 -*-
"""Gene Expression Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bvw3vJug_yuDeyPZLgF_ylImFC3FMlfI

##Environment Setup
"""

pip install scanpy anndata matplotlib seaborn pandas scikit-learn

"""##Load the .h5 File"""

import scanpy as sc

# Path to your downloaded file
adata = sc.read_10x_h5("/content/drive/MyDrive/Gene Expression Data/filtered_feature_bc_matrix.h5")

# Basic info
print(adata)

"""##Quality Control & Filtering"""

# Add metadata for QC
adata.var_names_make_unique()
adata.obs['n_counts'] = adata.X.sum(axis=1)
adata.obs['n_genes'] = (adata.X > 0).sum(1)

# Plot QC metrics
sc.pl.violin(adata, ['n_genes', 'n_counts'], jitter=0.4, multi_panel=True)

# Filter
sc.pp.filter_cells(adata, min_genes=200)
sc.pp.filter_genes(adata, min_cells=3)

"""##Normalize and Log Transform"""

sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
adata.raw = adata  # save raw version

"""##Identify Highly Variable Genes

"""

sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)
adata = adata[:, adata.var.highly_variable]

"""##Scaling and PCA"""

sc.pp.scale(adata, max_value=10)
sc.tl.pca(adata, svd_solver='arpack')

# Visualize PCA
sc.pl.pca(adata, color='n_counts')

"""##Clustering with UMAP"""

pip install igraph leidenalg

sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)
sc.tl.umap(adata)
sc.tl.leiden(adata, resolution=0.5)
sc.pl.umap(adata, color=['leiden'])

"""##Marker Gene Detection"""

sc.tl.rank_genes_groups(adata, 'leiden', method='t-test')
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

"""##Manual Cell Type Annotation"""

# Example marker genes for immune cells
marker_genes = {
    'T cells': ['CD3D'],
    'B cells': ['MS4A1'],
    'Monocytes': ['LYZ'],
    'NK cells': ['NKG7'],
    'Dendritic': ['FCER1A'],
    'Platelets': ['CD79A']
}

# Get the list of all marker genes
all_marker_genes = sum(marker_genes.values(), [])

# Check which marker genes are in the filtered dataset
present_marker_genes = [gene for gene in all_marker_genes if gene in adata.var_names]

# Plot expression of markers on UMAP, only for present genes
if present_marker_genes:
    sc.pl.umap(adata, color=present_marker_genes)
else:
    print("None of the specified marker genes are present in the filtered dataset.")